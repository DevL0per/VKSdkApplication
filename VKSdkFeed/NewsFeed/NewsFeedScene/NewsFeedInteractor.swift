//
//  NewsFeedInteractor.swift
//  VKSdkFeed
//
//  Created by Роман Важник on 27/01/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsFeedBusinessLogic {
    func getNews(request: NewsFeed.ShowNews.Request)
    func getUserInfo(request: NewsFeed.ShowUserInfo.Request)
    func showFullText(request: NewsFeed.ShowFullPostText.Request)
    func showPreviousNews(requset: NewsFeed.ShowPreviousNews.Request)
}

protocol NewsFeedDataStore {
}

class NewsFeedInteractor: NewsFeedBusinessLogic, NewsFeedDataStore {
    
    var presenter: NewsFeedPresentationLogic?
    var worker: NewsFeedWorker?
    var startTime: String?
    let datafetcher = DataFetcher<NewsFeedResponse>()
    
    func getNews(request: NewsFeed.ShowNews.Request) {
        datafetcher.fetchData(startTime: startTime) { [unowned self] (response) in
            guard let response = response else { return }
            self.startTime = response.response.startFrom
            self.presenter?.presentNews(response: NewsFeed.ShowNews.Response(newsFeedResponse: response))
        }
    }
    
    func getUserInfo(request: NewsFeed.ShowUserInfo.Request) {
        let userDatafetcher = DataFetcher<UserInfoResponse>()
        userDatafetcher.fetchUserData { (userInfoResponse) in
            guard let response = userInfoResponse else { return }
            self.presenter?.presentUserInfo(response: NewsFeed.ShowUserInfo.Response(userInfoResponse: response))
        }
    }
    
    func showFullText(request: NewsFeed.ShowFullPostText.Request) {
        presenter?.showFullText(response: NewsFeed.ShowFullPostText.Response(postId: request.postId,
                                                                             newsFeedViewModel: request.newsFeedViewModel))
    }
    
    func showPreviousNews(requset: NewsFeed.ShowPreviousNews.Request) {
        datafetcher.fetchData(startTime: startTime) { [unowned self] (response) in
            guard let response = response else { return }
            self.startTime = response.response.startFrom
            self.presenter?.presentNews(response: NewsFeed.ShowNews.Response(newsFeedResponse: response))
        }
    }
}
