//
//  NewsFeedViewController.swift
//  VKSdkFeed
//
//  Created by Роман Важник on 27/01/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsFeedDisplayLogic: class {
    func displayNews(viewModel: NewsFeed.ShowNews.ViewModel)
    func displayUserInfo(viewModel: NewsFeed.ShowUserInfo.ViewModel)
}

class NewsFeedViewController: UIViewController, NewsFeedDisplayLogic {
    
    var interactor: NewsFeedBusinessLogic?
    var router: (NSObjectProtocol & NewsFeedRoutingLogic & NewsFeedDataPassing)?
    
    var newsTableView: UITableView!
    var newsFeedViewModel: NewsFeed.ShowNews.ViewModel?
    
    let titleView = NavigationControllerView()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setup()
        setupNewsTableView()
        setupNavigationBar()
        interactor?.getNews(request: NewsFeed.ShowNews.Request())
        interactor?.getUserInfo(request: NewsFeed.ShowUserInfo.Request())
    }
    
    private func setupNewsTableView() {
        newsTableView = UITableView()
        view.addSubview(newsTableView)
        newsTableView.translatesAutoresizingMaskIntoConstraints = false
        newsTableView.topAnchor.constraint(equalTo: view.topAnchor).isActive = true
        newsTableView.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        newsTableView.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        newsTableView.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        
        newsTableView.delegate = self
        newsTableView.dataSource = self
        newsTableView.register(NewsFeedTableViewCell.self, forCellReuseIdentifier: "newsCell")
    }
    
    func displayNews(viewModel: NewsFeed.ShowNews.ViewModel) {
        DispatchQueue.main.async { [unowned self] in
            self.newsFeedViewModel = viewModel
            self.newsTableView.reloadData()
        }
    }
    
    func displayUserInfo(viewModel: NewsFeed.ShowUserInfo.ViewModel) {
        DispatchQueue.main.async { [unowned self] in
            self.titleView.setImage(imageURL: viewModel.imageURL)
        }
    }
    
    private func setupNavigationBar() {
        navigationController?.hidesBarsOnSwipe = true
        navigationItem.titleView = titleView
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = NewsFeedInteractor()
        let presenter = NewsFeedPresenter()
        let router = NewsFeedRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

extension NewsFeedViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return newsFeedViewModel?.news.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return newsFeedViewModel?.news[indexPath.row].sizes.totalHeight ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "newsCell", for: indexPath) as! NewsFeedTableViewCell
        cell.delegate = self
        guard let viewModel = newsFeedViewModel?.news[indexPath.row] else { return UITableViewCell() }
        cell.setupElements(with: viewModel)
        return cell
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return newsFeedViewModel?.news[indexPath.row].sizes.totalHeight ?? 0
    }
    
}

extension NewsFeedViewController: NewsFeedTableViewCellDelegate {
    
    func fullTextRequest(postId: Int) {
        interactor?.showFullText(request: NewsFeed.ShowFullPostText.Request(postId: postId,
                                                                            newsFeedViewModel: newsFeedViewModel!))
    }
}
