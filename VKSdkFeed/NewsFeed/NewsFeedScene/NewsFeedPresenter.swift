//
//  NewsFeedPresenter.swift
//  VKSdkFeed
//
//  Created by Роман Важник on 27/01/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsFeedPresentationLogic {
    func presentNews(response: NewsFeed.ShowNews.Response)
    func showFullText(response: NewsFeed.ShowFullPostText.Response)
    func presentUserInfo(response: NewsFeed.ShowUserInfo.Response)
    func presentPreviousNews(response: NewsFeed.ShowPreviousNews.Response)
    func presentSearchedGroups(response: NewsFeed.SearchGroup.Response)
}

class NewsFeedPresenter: NewsFeedPresentationLogic {
    
    weak var viewController: NewsFeedDisplayLogic?
    private var items: [ItemsData]?
    private var newsFeedPresenterWorker: NewsFeedPresenterWorkerProtocol = NewsFeedPresenterWorker()
    
    func presentNews(response: NewsFeed.ShowNews.Response) {
        let cells = getCells(from: response.newsFeedResponse)
        let newsFeedViewModel = NewsFeed.ShowNews.ViewModel(news: cells)
        viewController?.displayNews(viewModel: newsFeedViewModel)
    }
    
    func presentPreviousNews(response: NewsFeed.ShowPreviousNews.Response) {
        let cells = getCells(from: response.newsFeedResponse)
        items?+=response.newsFeedResponse.response.items
        let viewModel = NewsFeed.ShowNews.ViewModel(news: cells)
        viewController?.displayNews(viewModel: viewModel)
    }
    
    func presentUserInfo(response: NewsFeed.ShowUserInfo.Response) {
        let userInfo = response.userInfoResponse.response.first!
        let fullName = (userInfo.firstName) + " " + (userInfo.lastName)
        let viewModel = NewsFeed.ShowUserInfo.ViewModel(fullName: fullName, imageURL: userInfo.photo100)
        viewController?.displayUserInfo(viewModel: viewModel)
    }
    
    func presentSearchedGroups(response: NewsFeed.SearchGroup.Response) {
        guard let results = response.resultOfSearching else { return }
        let viewModel = NewsFeed.SearchGroup.ViewModel(resultOfSearching: results)
        viewController?.displaySearchedGroups(viewModel: viewModel)
    }
    
    func showFullText(response: NewsFeed.ShowFullPostText.Response) {
        var variableResponse = response
        for (index, post) in variableResponse.newsFeedViewModel.news.enumerated() {
            if post.postId == response.postId {
                let item = items?.first(where: {$0.postId == response.postId})
                let sizes = newsFeedPresenterWorker.sizesManager.getSizes(text: item?.text,
                                                   attacments: newsFeedPresenterWorker.getPhotos(from: item!),
                                                   fullTextWillShow: true)
                variableResponse.newsFeedViewModel.news[index].sizes = sizes
            }
        }
        viewController?.displayNews(viewModel: variableResponse.newsFeedViewModel)
    }
    
    private func getCells(from response: NewsFeedResponse) -> [NewsFeed.ShowNews.ViewModel.Cell] {
        let groups = response.response.groups
        let profiles = response.response.profiles
        if items == nil {
            items = response.response.items
        } else {
            items! += response.response.items
        }
        let cells = response.response.items.map { (feedItem) in
            newsFeedPresenterWorker.getNewsFeedViewModel(from: feedItem, profiles: profiles, groups: groups)
        }
        return cells
    }
    
}
