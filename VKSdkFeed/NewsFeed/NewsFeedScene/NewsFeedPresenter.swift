//
//  NewsFeedPresenter.swift
//  VKSdkFeed
//
//  Created by Роман Важник on 27/01/2020.
//  Copyright (c) 2020 Роман Важник. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol NewsFeedPresentationLogic {
    func presentNews(response: NewsFeed.ShowNews.Response)
    func showFullText(response: NewsFeed.ShowFullPostText.Response)
    func presentUserInfo(response: NewsFeed.ShowUserInfo.Response)
}

class NewsFeedPresenter: NewsFeedPresentationLogic {
    
    weak var viewController: NewsFeedDisplayLogic?
    private var sizesManager = SizesManager(viewWidth: UIScreen.main.bounds.width)
    private var items: [ItemsData]?
    
    let dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        dateFormatter.locale = Locale(identifier: "ru_RU")
        dateFormatter.dateFormat = "MMM d, h:mm"
        return dateFormatter
    }()
    
    func presentNews(response: NewsFeed.ShowNews.Response) {
        let groups = response.newsFeedResponse.response.groups
        let profiles = response.newsFeedResponse.response.profiles
        items = response.newsFeedResponse.response.items
        let cells = response.newsFeedResponse.response.items.map { (feedItem) in
            getNewsFeedViewModel(from: feedItem, profiles: profiles, groups: groups)
        }
        let newsFeedViewModel = NewsFeed.ShowNews.ViewModel(news: cells)
        viewController?.displayNews(viewModel: newsFeedViewModel)
    }
    
    func presentUserInfo(response: NewsFeed.ShowUserInfo.Response) {
        let userInfo = response.userInfoResponse.response.first!
        let fullName = (userInfo.firstName) + " " + (userInfo.lastName)
        let viewModel = NewsFeed.ShowUserInfo.ViewModel(fullName: fullName, imageURL: userInfo.photo100)
        viewController?.displayUserInfo(viewModel: viewModel)
    }
    
    private func getNewsFeedViewModel(from item: ItemsData, profiles: [Profiles], groups: [Group]) -> NewsFeed.ShowNews.ViewModel.Cell {
        let profile = getProfile(sourceId: item.sourceId, profiles: profiles, groups: groups)
        let date = Date(timeIntervalSince1970: item.date)
        let dateString = dateFormatter.string(from: date)
        let cell = NewsFeed.ShowNews.ViewModel.Cell(name: profile.name,
                                                  date: dateString,
                                                  postText: item.text ?? "",
                                                  postId: item.postId ,
                                                  likesCount: String(item.likes?.count ?? 0),
                                                  commentsCount: String(item.comments?.count ?? 0),
                                                  repostCount: String(item.reposts?.count ?? 0),
                                                  viewsCount: String(item.views?.count ?? 0),
                                                  profileImageURL: profile.photo100,
                                                  photo: getPhotos(from: item),
                                                  sizes: sizesManager.getSizes(text: item.text, attacments: getPhotos(from: item), fullTextWillShow: false)
                                                  )
        return cell
    }
    
    private func getProfile(sourceId: Int, profiles: [Profiles], groups: [Group] ) -> profileInfo {
        if sourceId < 0 {
            let group = groups.first { (group) in
                group.id == -sourceId
            }
            return group!
        } else {
            let profile = profiles.first { (profile) in
                profile.id == sourceId
            }
            return profile!
        }
    }
    
    private func getPhotos(from item: ItemsData) -> [NewsFeed.ShowNews.ViewModel.Attachment]? {
        let attachments = item.attachments?.compactMap({ (attachment) -> NewsFeed.ShowNews.ViewModel.Attachment? in
            if let photo = attachment.photo {
                return NewsFeed.ShowNews.ViewModel.Attachment(photoURL: photo.photoURL, width: photo.photoWidth, height: photo.photoHeight)
            } else { return nil }
        })
        return attachments
    }
    
    func showFullText(response: NewsFeed.ShowFullPostText.Response) {
        var variableResponse = response
        for (index, post) in variableResponse.newsFeedViewModel.news.enumerated() {
            if post.postId == response.postId {
                let item = items?.first(where: {$0.postId == response.postId})
                let sizes = sizesManager.getSizes(text: item?.text, attacments: getPhotos(from: item!), fullTextWillShow: true)
                variableResponse.newsFeedViewModel.news[index].sizes = sizes
            }
        }
        viewController?.displayNews(viewModel: variableResponse.newsFeedViewModel)
    }
    
}
